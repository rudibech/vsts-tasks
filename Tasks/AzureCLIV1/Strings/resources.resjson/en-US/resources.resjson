{
  "loc.friendlyName": "Azure CLI",
  "loc.helpMarkDown": "[More Information](http://go.microsoft.com/fwlink/?LinkID=827160)",
  "loc.description": "Run a Shell or Batch script with Azure CLI commands against an azure subscription",
  "loc.instanceNameFormat": "Azure CLI $(scriptPath)",
  "loc.releaseNotes": "What's new in Version 1.0:\n- Supports the new Azure CLI 2.0 which is Python based\n- Works with cross-platform agents (Linux, macOS, or Windows)\n- For working with Azure CLI 1.0 (node.js-based), switch to task version 0.0\n- Limitations:\n - No support for Azure Classic subscriptions. Azure CLI 2.0 supports only Azure Resource Manager (ARM) subscriptions.",
  "loc.group.displayName.advanced": "Advanced",
  "loc.input.label.connectedServiceNameARM": "Azure subscription",
  "loc.input.help.connectedServiceNameARM": "Select an Azure resource manager subscription for the deployment",
  "loc.input.label.scriptLocation": "Script Location",
  "loc.input.help.scriptLocation": "Type of script: File path or Inline script",
  "loc.input.label.scriptPath": "Script Path",
  "loc.input.help.scriptPath": "Fully qualified path of the script or a path relative to the the default working directory",
  "loc.input.label.inlineScript": "Inline Script",
  "loc.input.help.inlineScript": "You can write your scripts inline here. For batch files use the prefix \"call\" before every azure command. You can also pass predefined and custom variables to this script using arguments \n\n example for shell: az --version || az account show \n\n example for batch: call  az --version || call az account show",
  "loc.input.label.args": "Arguments",
  "loc.input.help.args": "Arguments passed to the script",
  "loc.input.label.cwd": "Working Directory",
  "loc.input.help.cwd": "Current working directory where the script is run.  Empty is the root of the repo (build) or artifacts (release), which is $(System.DefaultWorkingDirectory)",
  "loc.input.label.failOnStandardError": "Fail on Standard Error",
  "loc.input.help.failOnStandardError": "If this is true, this task will fail when any errors are written to the StandardError stream. Unselect the checkbox to ignore standard errors and rely on exit codes to determine the status",
  "loc.messages.ScriptReturnCode": "Script exited with return code: %d",
  "loc.messages.ScriptFailed": "Script failed with error: %s",
  "loc.messages.UnsupportedEndpointScheme": "Unsupported Endpoint Authorization Scheme: Service Principal for AzureRM",
  "loc.messages.AzureSDKNotFound": "Azure CLI 2.x is not installed on this machine.",
  "loc.messages.FailedToLogout": "The following error occurred while logging out: %s"
}