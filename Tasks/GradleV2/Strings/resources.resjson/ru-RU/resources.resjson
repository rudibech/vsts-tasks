{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[Подробнее...](https://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "Сборка с помощью скрипта программы-оболочки Gradle",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.releaseNotes": "Конфигурация анализа SonarQube перемещена в расширения [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) или [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) в задаче \"Подготовка конфигурации анализа\"",
  "loc.group.displayName.junitTestResults": "Результаты теста JUnit",
  "loc.group.displayName.codeCoverage": "Объем протестированного кода",
  "loc.group.displayName.advanced": "Дополнительно",
  "loc.group.displayName.CodeAnalysis": "Анализ кода",
  "loc.input.label.wrapperScript": "Gradle wrapper",
  "loc.input.help.wrapperScript": "Относительный путь от корня репозитория к скрипту оболочки Gradle.",
  "loc.input.label.options": "Параметры",
  "loc.input.label.tasks": "Задачи",
  "loc.input.label.cwd": "Рабочий каталог",
  "loc.input.help.cwd": "Рабочий каталог, в котором должна выполняться сборка Gradle. Если он не задан, используется корневой каталог репозитория.",
  "loc.input.label.publishJUnitResults": "Опубликовать в TFS или Team Services",
  "loc.input.help.publishJUnitResults": "Выберите этот параметр, чтобы опубликовать результаты теста JUnit, созданные сборкой Gradle, в TFS или Team Services. Каждый файл результатов теста, соответствующий запросу \"Файлы результатов тестов\", будет опубликован как тестовый запуск в TFS или Team Services.",
  "loc.input.label.testResultsFiles": "Файлы результатов теста",
  "loc.input.help.testResultsFiles": "Путь к файлам результатов тестов. Можно использовать подстановочные знаки. Пример: \"**/TEST-*.xml\" для всех XML-файлов, имена которых начинаются с \"TEST-\".",
  "loc.input.label.testRunTitle": "Название тестового запуска",
  "loc.input.help.testRunTitle": "Укажите имя для тестового запуска.",
  "loc.input.label.codeCoverageTool": "Code coverage tool",
  "loc.input.help.codeCoverageTool": "Выберите средство оценки объемов протестированного кода.",
  "loc.input.label.classFilesDirectories": "Class files directories",
  "loc.input.help.classFilesDirectories": "Разделенный запятыми список каталогов, содержащих файлы классов и архивов (JAR, WAR и т. д.). Объем протестированного кода указывается для файлов классов в этих каталогах. Задача ищет классы в каталоге \"build/classes/main\", который является каталогом классов по умолчанию для сборок Gradle.",
  "loc.input.label.classFilter": "Class inclusion/exclusion filters",
  "loc.input.help.classFilter": "Список фильтров с разделителями-запятыми для включения или исключения классов при сборе данных по объему протестированного кода. Например: +:com.*,+:org.*,-:my.app*.*.",
  "loc.input.label.failIfCoverageEmpty": "Fail when code coverage results are missing",
  "loc.input.help.failIfCoverageEmpty": "Если объем протестированного кода не дал результатов для публикации, завершить сборку сбоем.",
  "loc.input.label.javaHomeSelection": "Установка JAVA_HOME с помощью",
  "loc.input.help.javaHomeSelection": "Задается JAVA_HOME указанием версии JDK, которая будет обнаруживаться во время сборок, или указанием пути к JDK вручную.",
  "loc.input.label.jdkVersion": "JDK version",
  "loc.input.help.jdkVersion": "Пытается определить путь к выбранной версии JDK и установить переменную JAVA_HOME соответствующим образом.",
  "loc.input.label.jdkUserInputPath": "JDK path",
  "loc.input.help.jdkUserInputPath": "Установка для JAVA_HOME определенного пути.",
  "loc.input.label.jdkArchitecture": "JDK architecture",
  "loc.input.help.jdkArchitecture": "Дополнительно укажите архитектуру JDK (x86, x64).",
  "loc.input.label.gradleOpts": "Задать GRADLE_OPTS",
  "loc.input.help.gradleOpts": "Задает переменную среды GRADLE_OPTS, которая используется для отправки аргументов командной строки, запускающих JVM. Флаг xmx указывает максимальный объем памяти, доступный JVM.",
  "loc.input.label.sqAnalysisEnabled": "Запустить анализ SonarQube или SonarCloud",
  "loc.input.help.sqAnalysisEnabled": "Этот параметр был изменен с версии 1 задачи **Gradle** для использования расширений Marketplace [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) и [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud). Включите его, чтобы запустить [анализ SonarQube или SonarCloud](http://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html) после выполнения задач в поле **Задачи**. Также необходимо добавить задачу **Подготовить конфигурацию анализа** из одного из расширений в определение сборки перед этой задачей Gradle.",
  "loc.input.label.sqGradlePluginVersionChoice": "SonarQube scanner for Gradle version",
  "loc.input.help.sqGradlePluginVersionChoice": "Используемая версия подключаемого модуля SonarQube Gradle. Ее можно объявить в файле конфигурации Gradle или указать здесь.",
  "loc.input.label.sqGradlePluginVersion": "SonarQube scanner for Gradle plugin version",
  "loc.input.help.sqGradlePluginVersion": "Список всех доступных версий: https://plugins.gradle.org/plugin/org.sonarqube.",
  "loc.input.label.checkstyleAnalysisEnabled": "Запустить Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "Запустите средство Checkstyle с проверками Sun по умолчанию. Результаты передаются как артефакты сборки.",
  "loc.input.label.findbugsAnalysisEnabled": "Запустить FindBugs",
  "loc.input.help.findbugsAnalysisEnabled": "Программа для статического анализа FindBugs используется для поиска ошибок в коде. Результаты отправляются в виде артефактов сборки.",
  "loc.input.label.pmdAnalysisEnabled": "Запустить PMD",
  "loc.input.help.pmdAnalysisEnabled": "Используйте средство статического анализа Java PMD для поиска ошибок в коде. Результаты передаются как артефакты сборки.",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "Не удалось создать объект TaskReport. Отсутствует поле: %s",
  "loc.messages.sqCommon_WaitingForAnalysis": "Ожидание анализа сборки сервером SonarQube.",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "Для сборки не настроено ожидание анализа SonarQube. Подробные данные о состоянии шлюза качества будут недоступны.",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "Не удалось обнаружить состояние шлюза качества или представлено новое состояние.",
  "loc.messages.sqCommon_InvalidResponseFromServer": "Недопустимый или непредвиденный формат ответа сервера.",
  "loc.messages.codeAnalysis_ToolIsEnabled": "Анализ %s включен.",
  "loc.messages.codeAnalysis_ToolFailed": "Сбой анализа %s.",
  "loc.messages.sqAnalysis_IncrementalMode": "Обнаружена сборка PR — анализ SonarQube выполняется в инкрементном режиме",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "Отчет об анализе SonarQube",
  "loc.messages.sqAnalysis_TaskReportInvalid": "Отчет о задаче недопустим или отсутствует. Убедитесь в том, что работа SonarQube завершена успешно.",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "Подробный отчет SonarQube",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "Невозможно пройти проверку подлинности на сервере SonarQube. Проверьте данные о сохраненной конечной точке и состояние сервера.",
  "loc.messages.sqAnalysis_AnalysisTimeout": "Анализ не выполнен в течение отведенного времени (%d с).",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "Сборка запроса на вытягивание: подробная сводка по сборке SonarQube будет недоступна.",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "Сборка запроса на вытягивание: сборка не будет нарушена в случае сбоя шлюза качества.",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "Сбой шлюза качества SonarQube, связанного с этой сборкой.",
  "loc.messages.sqAnalysis_QualityGatePassed": "Шлюз качества SonarQube, связанный с этой сборкой, передал состояние \"%s\".",
  "loc.messages.sqAnalysis_UnknownComparatorString": "Обнаружена ошибка в сводке по сборке SonarQube: неизвестный блок сравнения \"%s\".",
  "loc.messages.sqAnalysis_NoUnitsFound": "Не удается получить список единиц измерения SonarQube с сервера.",
  "loc.messages.sqAnalysis_NoReportTask": "Не удалось найти файл report-task.txt. Возможная причина: анализ SonarQube не был успешно завершен.",
  "loc.messages.sqAnalysis_MultipleReportTasks": "Обнаружено несколько файлов report-task.txt. Будет выбран первый из них. Сводка по сборке и причина прерывания сборки могут оказаться неточными. Возможная причина: в одной и той же сборке запущено несколько экземпляров анализа SonarQube, что не поддерживается.",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s обнаружил нарушения (%d) в файлах (%d).",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s обнаружил нарушения (%d) в одном файле.",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s обнаружил одно нарушение в одном файле.",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s не обнаружил нарушений.",
  "loc.messages.codeAnalysisBuildSummaryTitle": "Отчет по анализу кода",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "Результаты анализа кода",
  "loc.messages.codeAnalysisDisabled": "Анализ кода отключен вне среды сборки. Не удалось найти значение: %s",
  "loc.messages.LocateJVMBasedOnVersionAndArch": "Найдите JAVA_HOME для Java %s %s",
  "loc.messages.FailedToLocateSpecifiedJVM": "Не удалось найти указанную версию JDK. Убедитесь, что она установлена на агенте, а переменная среды \"%s\" создана и содержит путь к соответствующей версии JDK, или установите необходимую версию JDK с помощью [установщика инструментов Java](https://docs.microsoft.com/ru-ru/vsts/build-release/tasks/tool/java-tool-installer).",
  "loc.messages.NoCodeCoverage": "Нет результатов объема протестированного кода для публикации."
}