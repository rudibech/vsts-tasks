{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[详细信息](https://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "使用 Gradle 包装器脚本生成",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.releaseNotes": "Configuration of the SonarQube analysis was moved to the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) or [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) extensions, in task `Prepare Analysis Configuration`",
  "loc.group.displayName.junitTestResults": "JUnit 测试结果",
  "loc.group.displayName.codeCoverage": "代码覆盖率",
  "loc.group.displayName.advanced": "高级",
  "loc.group.displayName.CodeAnalysis": "代码分析",
  "loc.input.label.wrapperScript": "Gradle wrapper",
  "loc.input.help.wrapperScript": "从存储库根路径到“Gradle 包装器脚本”的相对路径。",
  "loc.input.label.options": "选项",
  "loc.input.label.tasks": "任务",
  "loc.input.label.cwd": "工作目录",
  "loc.input.help.cwd": "要在其中运行 Gradle 生成的工作目录。若未指定，则使用存储库根路径。",
  "loc.input.label.publishJUnitResults": "发布到 TFS/Team Services",
  "loc.input.help.publishJUnitResults": "选择此选项可将 Gradle 生成产生的 JUnit 测试结果发布到 TFS/Team Services。每个与“测试结果文件”匹配的测试结果文件都会在 TFS/Team Services 中发布为测试运行。",
  "loc.input.label.testResultsFiles": "测试结果文件",
  "loc.input.help.testResultsFiles": "测试结果文件路径。可以使用通配符。例如，\"**/TEST-*.xml\" 表示名称以 TEST- 开头的所有 XML 文件。",
  "loc.input.label.testRunTitle": "测试运行标题",
  "loc.input.help.testRunTitle": "为测试运行提供一个名称。",
  "loc.input.label.codeCoverageTool": "Code coverage tool",
  "loc.input.help.codeCoverageTool": "选择代码覆盖率工具。",
  "loc.input.label.classFilesDirectories": "Class files directories",
  "loc.input.help.classFilesDirectories": "包含类文件和存档文件(JAR 和 WAR 等)的目录列表，以逗号分隔。报告这些目录中类文件的代码覆盖率。通常情况下，在 \"build/classes/main\" 下搜索类，这是 Gradle 生成的默认类目录",
  "loc.input.label.classFilter": "Class inclusion/exclusion filters",
  "loc.input.help.classFilter": "用于在收集代码覆盖率时包含或排除类的筛选器列表，以逗号分隔。例如: +:com.*、+:org.*、-:my.app*.*。",
  "loc.input.label.failIfCoverageEmpty": "Fail when code coverage results are missing",
  "loc.input.help.failIfCoverageEmpty": "如果代码覆盖率未产生任何要发布的结果，则生成将失败。",
  "loc.input.label.javaHomeSelection": "JAVA_HOME 设置方法",
  "loc.input.help.javaHomeSelection": "可通过选择将在生成期间发现的 JDK 版本或手动输入 JDK 路径来设置 JAVA_HOME。",
  "loc.input.label.jdkVersion": "JDK version",
  "loc.input.help.jdkVersion": "将尝试发现所选 JDK 版本的路径并相应地设置 JAVA_HOME。",
  "loc.input.label.jdkUserInputPath": "JDK path",
  "loc.input.help.jdkUserInputPath": "将 JAVA_HOME 设置到给定路径。",
  "loc.input.label.jdkArchitecture": "JDK architecture",
  "loc.input.help.jdkArchitecture": "可以选择提供 JDK 的体系结构(x86、x64)。",
  "loc.input.label.gradleOpts": "设置 GRADLE_OPTS",
  "loc.input.help.gradleOpts": "设置 GRADLE_OPTS 环境变量，此变量将用于发送命令行参数以启动 JVM。xmx 标志将指定 JVM 可用的最大内存。",
  "loc.input.label.sqAnalysisEnabled": "Run SonarQube or SonarCloud Analysis",
  "loc.input.help.sqAnalysisEnabled": "This option has changed from version 1 of the **Gradle** task to use the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) and [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) marketplace extensions. Enable this option to run [SonarQube or SonarCloud analysis](http://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html) after executing tasks in the **Tasks** field. You must also add a **Prepare Analysis Configuration** task from one of the extensions to the build definition before this Gradle task.",
  "loc.input.label.sqGradlePluginVersionChoice": "SonarQube scanner for Gradle version",
  "loc.input.help.sqGradlePluginVersionChoice": "The SonarQube Gradle plugin version to use. You can declare it in your Gradle configuration file, or specify a version here.",
  "loc.input.label.sqGradlePluginVersion": "SonarQube scanner for Gradle plugin version",
  "loc.input.help.sqGradlePluginVersion": "Refer to https://plugins.gradle.org/plugin/org.sonarqube for all available versions.",
  "loc.input.label.checkstyleAnalysisEnabled": "运行 Checkstyle",
  "loc.input.help.checkstyleAnalysisEnabled": "使用默认 Sun 检查运行 Checkstyle 工具。将结果上传为生成项目。",
  "loc.input.label.findbugsAnalysisEnabled": "运行 FindBugs",
  "loc.input.help.findbugsAnalysisEnabled": "使用 FindBugs 静态分析工具查找代码中的 bug。结果将作为生成项目进行上传。",
  "loc.input.label.pmdAnalysisEnabled": "运行 PMD",
  "loc.input.help.pmdAnalysisEnabled": "使用 PMD Java 静态分析工具查找代码中的 bug。将结果上传为生成项目。",
  "loc.messages.sqCommon_CreateTaskReport_MissingField": "未能创建 TaskReport 对象。缺少字段: %s",
  "loc.messages.sqCommon_WaitingForAnalysis": "正在等待 SonarQube 服务器分析生成。",
  "loc.messages.sqCommon_NotWaitingForAnalysis": "生成未配置等待 SonarQube 分析。详细的质量检验关状态不可用。",
  "loc.messages.sqCommon_QualityGateStatusUnknown": "无法检测质量检验关状态，或已引入新的状态。",
  "loc.messages.sqCommon_InvalidResponseFromServer": "从服务器返回了无效的或意外的响应格式。",
  "loc.messages.codeAnalysis_ToolIsEnabled": "%s 分析已启用。",
  "loc.messages.codeAnalysis_ToolFailed": "%s 分析失败。",
  "loc.messages.sqAnalysis_IncrementalMode": "检测到 PR 生成 - 在增量模式下运行 SonarQube 分析",
  "loc.messages.sqAnalysis_BuildSummaryTitle": "SonarQube 分析报表",
  "loc.messages.sqAnalysis_TaskReportInvalid": "任务报表无效或丢失。请检查 SonarQube 是否成功完成。",
  "loc.messages.sqAnalysis_BuildSummary_LinkText": "详细的 SonarQube 报表",
  "loc.messages.sqAnalysis_BuildSummary_CannotAuthenticate": "无法对 SonarQube 服务器进行验证。请查看已保存的终结点详细信息和该服务器的状态。",
  "loc.messages.sqAnalysis_AnalysisTimeout": "未在分配的时间(%d 秒)内完成分析。",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildSummary": "拉取请求生成: 详细的 SonarQube 生成摘要不可用。",
  "loc.messages.sqAnalysis_IsPullRequest_SkippingBuildBreaker": "拉取请求生成: 生成不会因质量检验关问题而断开。",
  "loc.messages.sqAnalysis_BuildBrokenDueToQualityGateFailure": "与此生成关联的 SonarQube 质量检验关出现问题。",
  "loc.messages.sqAnalysis_QualityGatePassed": "已通过与此生成关联的 SonarQube 质量检验关(状态 %s)",
  "loc.messages.sqAnalysis_UnknownComparatorString": "SonarQube 生成摘要遇到了问题: 未知的比较运算符“%s”",
  "loc.messages.sqAnalysis_NoUnitsFound": "无法从服务器检索 SonarQube 度量单位列表。",
  "loc.messages.sqAnalysis_NoReportTask": "无法找到 report-task.txt。可能的原因: SonarQube 分析未成功完成。",
  "loc.messages.sqAnalysis_MultipleReportTasks": "找到了多个 report-task.txt 文件。选择第一个文件。生成摘要和生成断裂可能不正确。可能的原因: 同一生成中存在多个 SonarQube 分析，这种情况不受支持。",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsSomeFiles": "%s 发现 %d 个冲突存在于 %d 个文件中。",
  "loc.messages.codeAnalysisBuildSummaryLine_SomeViolationsOneFile": "%s 发现 %d 个冲突存在于 1 个文件中。",
  "loc.messages.codeAnalysisBuildSummaryLine_OneViolationOneFile": "%s 发现 1 个冲突存在于 1 个文件中。",
  "loc.messages.codeAnalysisBuildSummaryLine_NoViolations": "%s 未发现任何冲突。",
  "loc.messages.codeAnalysisBuildSummaryTitle": "代码分析报告",
  "loc.messages.codeAnalysisArtifactSummaryTitle": "代码分析结果",
  "loc.messages.codeAnalysisDisabled": "代码分析在生成环境外被禁用。无法找到 %s 的值",
  "loc.messages.LocateJVMBasedOnVersionAndArch": "为 Java %s %s 查找 JAVA_HOME",
  "loc.messages.FailedToLocateSpecifiedJVM": "Failed to find the specified JDK version. Please ensure the specified JDK version is installed on the agent and the environment variable '%s' exists and is set to the location of a corresponding JDK or use the [Java Tool Installer](https://docs.microsoft.com/en-us/vsts/build-release/tasks/tool/java-tool-installer) task to install the desired JDK.",
  "loc.messages.NoCodeCoverage": "未找到任何要发布的代码覆盖率结果。"
}