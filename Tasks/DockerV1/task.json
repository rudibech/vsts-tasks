{
    "id": "E28912F1-0114-4464-802A-A3A35437FD16",
    "name": "Docker",
    "friendlyName": "Docker",
    "description": "Build, tag, push, or run Docker images, or run a Docker command. Task can be used with Docker or Azure Container registry.",
    "helpMarkDown": "[More Information](https://go.microsoft.com/fwlink/?linkid=848006)",
    "category": "Build",
    "visibility": [
        "Build",
        "Release"
    ],
    "author": "Microsoft Corporation",
    "version": {
        "Major": 1,
        "Minor": 0,
        "Patch": 0
    },
    "demands": [],
    "preview": "true",
    "releaseNotes": "Simplified the task by:<br/>&nbsp;- Providing an option to simply select or type a command.<br/>&nbsp;- Retaining the useful input fields and providing an option to pass the rest as an argument to the command.",
    "groups": [
        {
            "name": "advanced",
            "displayName": "Advanced Options",
            "isExpanded": false
        }
    ],
    "inputs": [
        {
            "name": "containerregistrytype",
            "type": "pickList",
            "label": "Container registry type",
            "defaultValue": "Azure Container Registry",
            "required": true,
            "options": {
                "Azure Container Registry": "Azure Container Registry",
                "Container Registry": "Container Registry"
            },
            "helpMarkDown": "Select a Container Registry Type."
        },
        {
            "name": "dockerRegistryEndpoint",
            "type": "connectedService:dockerregistry",
            "label": "Docker registry connection",
            "helpMarkDown": "Select a Docker registry connection. Required for commands that need to authenticate with a registry.",
            "visibleRule": "containerregistrytype = Container Registry"
        },
        {
            "name": "azureSubscriptionEndpoint",
            "type": "connectedService:AzureRM",
            "label": "Azure subscription",
            "helpMarkDown": "Select an Azure subscription",
            "visibleRule": "containerregistrytype = Azure Container Registry"
        },
        {
            "name": "azureContainerRegistry",
            "label": "Azure container registry",
            "type": "pickList",
            "helpMarkDown": "Select an Azure Container Registry",
            "visibleRule": "containerregistrytype = Azure Container Registry",
            "defaultValue": ""
        },
        {
            "name": "command",
            "type": "pickList",
            "label": "Command",
            "defaultValue": "Build an image",
            "required": true,
            "options": {
                "Build an image": "Build",
                "Tag image": "Tag",
                "Push an image": "Push",
                "Run an image": "Run"
            },
            "properties": {
                "EditableOptions": "True"
            },
            "helpMarkDown": "Select a Docker command."
        },
        {
            "name": "dockerFile",
            "type": "filePath",
            "label": "Dockerfile",
            "defaultValue": "**/Dockerfile",
            "required": true,
            "visibleRule": "command = Build an image",
            "helpMarkDown": "Path to the Dockerfile to use. Must be within the Docker build context."
        }, 
        {
            "name": "arguments",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "visibleRule": "command != Run an image && command != Tag image",
            "label": "Arguments",
            "helpMarkDown": "Command arguments."
        },
        {
            "name": "useDefaultContext",
            "type": "boolean",
            "label": "Use default build context",
            "defaultValue": "true",
            "visibleRule": "command = Build an image",
            "helpMarkDown": "Set the build context to the directory that contains the Dockerfile."
        },
        {
            "name": "buildContext",
            "type": "filePath",
            "label": "Build context",
            "visibleRule": "command = Build an image && useDefaultContext = false",
            "helpMarkDown": "Path to the build context."
        },
        {
            "name": "pushMultipleImages",
            "type": "boolean",
            "label": "Push multiple images",
            "defaultValue": "false",
            "visibleRule": "command = Push an image",
            "helpMarkDown": "Push multiple images."
        },
        {
            "name": "tagMultipleImages",
            "type": "boolean",
            "label": "Tag multiple images",
            "defaultValue": "false",
            "visibleRule": "command = Tag image",
            "helpMarkDown": "Tag multiple images."
        },
        {
            "name": "imageName",
            "type": "string",
            "label": "Image name",
            "defaultValue": "$(Build.Repository.Name):$(Build.BuildId)",
            "required": true,
            "visibleRule": "command = Build an image || command = Run an image || pushMultipleImages = false || tagMultipleImages = false",
            "helpMarkDown": "Name of the Docker image to build, push, or run."
        },
        {
            "name": "imageNamesPath",
            "type": "filePath",
            "label": "Image names path",
            "required": true,
            "visibleRule": "tagMultipleImages = true || pushMultipleImages = true",
            "helpMarkDown": "Path to a text file that contains the names of the Docker images to tag or push. Each image name is contained on its own line."
        },
        {
            "name": "qualifyImageName",
            "type": "boolean",
            "label": "Qualify image name",
            "defaultValue": "true",
            "visibleRule": "command = Build an image || command = Tag image || command = Push an image || command = Run an image",
            "helpMarkDown": "Qualify the image name with the Docker registry connection's hostname if not otherwise specified."
        },
        {
            "name": "includeSourceTags",
            "type": "boolean",
            "label": "Include source tags",
            "defaultValue": "false",
            "visibleRule": "command = Build an image || command = Tag image || command = Push an image",
            "helpMarkDown": "Include Git tags when building or pushing the Docker image."
        },
        {
            "name": "includeLatestTag",
            "type": "boolean",
            "label": "Include latest tag",
            "defaultValue": "false",
            "visibleRule": "command = Build an image || command = Push an image",
            "helpMarkDown": "Include the 'latest' tag when building or pushing the Docker image."
        },
        {
            "name": "imageDigestFile",
            "type": "filePath",
            "label": "Image digest file",
            "visibleRule": "command = Push an image",
            "helpMarkDown": "Path to a file that is created and populated with the full image repository digest of the Docker image that was pushed."
        },
        {
            "name": "containerName",
            "type": "string",
            "label": "Container name",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Name of the Docker container to run."
        },
        {
            "name": "ports",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Ports",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Ports in the Docker container to publish to the host. Specify each host-port:container-port binding on a new line."
        },
        {
            "name": "volumes",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Volumes",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Volumes to mount from the host. Specify each host-dir:container-dir on a new line."
        },
        {
            "name": "envVars",
            "type": "multiLine",
            "properties": {
                "resizable": "true",
                "rows": "2"
            },
            "label": "Environment variables",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Environment variables for the Docker container. Specify each name=value pair on a new line."
        },
        {
            "name": "workingDirectory",
            "type": "string",
            "label": "Working directory",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "The working directory for the Docker container."
        },
        {
            "name": "entrypointOverride",
            "type": "string",
            "label": "Entrypoint override",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Override the default entrypoint for the Docker container."
        },
        {
            "name": "containerCommand",
            "type": "string",
            "label": "Command",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Command to run in the Docker container. For example, if the image contains a simple Python Flask web application you can specify 'python app.py' to launch the web application."
        },
        {
            "name": "runInBackground",
            "type": "boolean",
            "label": "Run in background",
            "defaultValue": "true",
            "visibleRule": "command = Run an image",
            "helpMarkDown": "Run the Docker container in the background."
        },
        {
            "name": "restartPolicy",
            "type": "pickList",
            "label": "Restart policy",
            "defaultValue": "no",
            "required": true,
            "options": {
                "no": "No",
                "onFailure": "On failure",
                "always": "Always",
                "unlessStopped": "Unless stopped"
            },
            "visibleRule": "command = Run an image && runInBackground = true",
            "helpMarkDown": "Select a restart policy."
        },
        {
            "name": "maxRestartRetries",
            "type": "string",
            "label": "Maximum restart retries",
            "visibleRule": "command = Run an image && runInBackground = true && restartPolicy = onFailure",
            "helpMarkDown": "The maximum number of restart retries the Docker daemon attempts."
        },
        {
            "name": "dockerHostEndpoint",
            "type": "connectedService:dockerhost",
            "label": "Docker host connection",
            "helpMarkDown": "Select a Docker host connection. Defaults to the agent's host.",
            "groupName": "advanced"
        },
        {
            "name": "enforceDockerNamingConvention",
            "type": "boolean",
            "label": "Force image name to follow Docker naming convention",
            "required": false,
            "defaultValue": "true",
            "helpMarkDown": "If enabled Docker image name will be modified to follow Docker naming convention. Converts upper case character to lower case and removes spaces in image name.",
            "groupName": "advanced"
        },
        {
            "name": "memoryLimit",
            "type": "string",
            "label": "Memory limit",
            "helpMarkDown": "The maximum amount of memory available to the container as a integer with optional suffixes like '2GB'.",
            "groupName": "advanced"
        }
    ],
    "dataSourceBindings": [
        {
            "target": "azureContainerRegistry",
            "endpointId": "$(azureSubscriptionEndpoint)",
            "dataSourceName": "AzureRMContainerRegistries",
            "resultTemplate": "{\"Value\":\"{{{properties.loginServer}}}\",\"DisplayValue\":\"{{{name}}}\"}"
        }
    ],
    "instanceNameFormat": "$(command)",
    "execution": {
        "Node": {
            "target": "container.js"
        }
    },
    "messages": {
        "ContainerPatternFound": "Pattern found in Docker filepath parameter",
        "ContainerPatternNotFound": "No pattern found in Docker filepath parameter",
        "ContainerDockerFileNotFound":"No Dockerfile matching  %s  was found.",
        "NoImagesInImageNamesFile": "At least one image name is expected in file '%s'.",
        "CantWriteDataToFile": "Can not write data to the file %s. Error: %s",
        "NoDataWrittenOnFile":"No data was written into the file %s",
        "FileContentSynced": "Synced the file content to the disk. The content is %s."
    }
}
