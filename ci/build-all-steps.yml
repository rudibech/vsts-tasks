parameters:
  os: ''

steps:

# Clean
- checkout: self
  clean: true

# Only when building on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Start collect diagnostics
  - powershell: ./ci/start-collect-diagnostics.ps1
    displayName: Start collect diagnostics
    condition: and(succeeded(), eq(variables.collect_diagnostics, 'true'))

# Use node 8, npm 5
- task: NodeTool@0
  displayName: Use node 8
  inputs:
    versionSpec: "8.x"

# npm install
- script: npm install
  displayName: npm install

# Slice the tasks (sets TASK_PATTERN)
- script: node ./ci/set-task-slice.js
  displayName: Set task slice

# Build
- script: node make.js build --task "$(task_pattern)"
  displayName: Build

# Only on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Stage slice
  - script: node ./ci/stage-slice.js
    displayName: Stage slice
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))

  # Publish slice artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish slice artifact
    condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'))
    inputs:
      pathToPublish: _package/tasks.zip
      artifactName: slice-$(system.jobPositionInPhase)
      publishLocation: container

# Test
- script: node make.js test
  displayName: Test with node 6
- script: node make.js testLegacy --task "$(task_pattern)"
  displayName: Legacy tests with node 6

# Test with node 5
- script: node make.js test --node 5 --runner ts
  displayName: Test with node 5
- script: node make.js testLegacy --node 5 --runner ts --task "$(task_pattern)"
  displayName: Legacy tests with node 5

# Only when building on Windows:
- ${{ if eq(parameters.os, 'Windows_NT') }}:

  # Stop collect diagnostics
  - powershell: ./ci/stop-collect-diagnostics.ps1
    displayName: Stop collect diagnostics
    condition: and(always(), eq(variables.collect_diagnostics, 'true'))
