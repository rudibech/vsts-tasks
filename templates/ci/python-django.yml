# Python Django
# Test a Django project on multiple versions of Python.
# https://aka.ms/yaml

phases:

- phase: 'Test'
  queue:
    name: 'Hosted Linux'
    parallel: 3
    matrix:
      Python35:
        PYTHON_VERSION: '3.5'
      Python36:
        PYTHON_VERSION: '3.6'
      Python37-dev:
        PYTHON_VERSION: '>= 3.7.0a'
  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PYTHON_VERSION)'
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      targetType: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        # Python >= 3.5
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
      
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install dependencies'

  - script: pip install -r requirements.txt
    displayName: 'Install requirements'

  - script: pip install unittest-xml-reporting
    displayName: 'Install unittest-xml-reporting'

  - script: pushd '$(projectRoot)' && python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
      testRunTitle: 'Python $(PYTHON_VERSION)'

# - phase: 'Publish'
#   dependsOn: 'Test'
#   queue: 'Hosted Linux'
#   steps:
#   - task: CopyFiles@2
#     inputs:
#       sourceFolder: '$(build.sourcesDirectory)'
#       targetFolder: '$(build.artifactStagingDirectory)'
#   - task: PublishBuildArtifacts@1
